import http.server
import urllib.parse
import os

class SimpleBoard:
    def __init__(self, filename="board.txt"):
        self.posts = {}#키는 정수로 가고 딕셔너리 속 딕셔너리로 들어가게 해서 {1:{타이틀: }} ... 이렇게
        self.next_id = 1#다음 순서로 추가 될 키
        self.filename = filename
        self.load_posts()
    def load_posts(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                lines = file.readerlines()
                for line in lines:
                    post_id, title, content = line.strip().split('\t')
                    self.posts[int(post_id)] = {'tiltle' : title, 'content':content}
                if self.posts: #비어있는 딕셔너라ㅣ가 아니면 True
                    self.next_id = max(self.posts.keys()) + 1
    def save_posts(self):
        with open(self.filename, 'w') as file:
            print("saving..")
            for post_id, post in self.posts.items():
                file.write(f"{post_id}\t{post['title']}\t{post['content']}\n")

    def list_posts(self):
        posts_html = ""
        for pid, post in self.posts.items():
          posts_html += (
              f"<tr>"
              f"<td>{pid}</td>"
              f"<td>{post['content']}</td>"
              f"<td><a href='/delete?id={pid}'>Delete</a></td>"
              f"</tr>"
          )  
        return posts_html
    
board = SimpleBoard()

class RequestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        path, _, query_string = self.path.partition("?")
        # 그냥 url은 겟방식인데 ?qurey로 치는것은 겟방식으로 서버로 요청을 보내는데 ??도 같이 보내는 것
        #shopping.///?를 기준으로 우측이 query_string(HTTP url 요청시 추가로 들어가는 파라미터)
        #도메인 이름을 제외한 /search/all은 페이지 이름이다. = 즉,웹페이지 내부 경로
        #여기 설명 다시 듣기#예를 들명 path = '/search/all', query_string = 'q'        
        query = urllib.parse.parse_qs(query_string)
        #~~

        if path =='/': #도메인 이름에 해당하는 메인 페이지
            self.list_page()
        elif path == '/add':
            #


    def list_page(self):
        self.send_response(200) #상태코드 : 200 -석세르
        self.send_header('content-type','text/html') #body 문서 종류
        self.end_headers()

        html = f"""  
            <html>
                <body>
                    <h1> Add Post</h1>
                   <form action="/add" method="post"> #서버로 전송하겠단 뜻
                        Title : <input type="text" name="title><br>
                        Content:
                        <textarea name="content"></textarea> <br>
                        <input type="submit"> value="add <br>
                   </form>
                    <br> <a href="/>Back to List</a>
                </body>
            </html>
        """
        self.wfile.write(html.encode('utf-8'))#바디에 html 태그 내용을 태워서 보냄

if __name__ == '__main__':
    server = http.server.HTTPServer(('localhost', 8000), RequestHandler)
    print('Starting server at http://localhost:8000')



    import http.server
import urllib.parse
import os

class SimpleBoard:
    def __init__(self, filename="board.txt"):
        self.posts = {}
        self.next_id = 1 # 다음 순서로 추가될 키
        self.filename = filename
        self.load_posts()

    def load_posts(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                lines = file.readlines()
                for line in lines:
                    post_id, title, content = line.strip().split('\t')
                    self.posts[int(post_id)] = {'title': title, 'content':content}
                if self.posts: # 비어 있는 딕셔너리가 아니면 True
                    self.next_id = max(self.posts.keys()) + 1
    def save_posts(self):
        with open(self.filename, 'w') as file:
            print("saving...")
            for post_id, post in self.posts.items():
                file.write(f"{post_id}\t{post['title']}\t{post['content']}\n")

    def list_posts(self):
        posts_html = ""
        for pid, post in self.posts.items():
            posts_html += (
                f"<tr>"
                f"<td>{pid}</td>"
                f"<td>{post['title']}</td>"
                f"<td>{post['content']}</td>"
                f"<td><a href='/delete?id={pid}'>Delete</a></td>"
                f"</tr>"
            )
        return posts_html
        

board = SimpleBoard()

class RequestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        path, _, query_string = self.path.partition("?")
        # shopping.naver.com/search/all?query=코일매트
        # ?를 기준으로 우측이 query_string(HTTP url 요청 시 추가로 들어가는 parameter)
        # 도메인 이름을 제외한 /search/all은 page 이름 = 웹 페이지 내부 경로
        # 예시를 들자면 path = '/search/all', query_string = 'query=코일매트'
        query = urllib.parse.parse_qs(query_string)
        # query_string은 다시 parsing됨: {'query': ['코일매트']}

        if path == '/':  # 도메인 이름에 해당하는 메인 페이지
            self.list_page()
        elif path == '/add':
            self.add_page()
    def add_page(self):
        self.send_response(200) # 상태코드 : 200 - Success
        self.send_header('Content-type', 'text/html') # body의 문서 종류
        self.end_headers()

        html = f"""
            <html>
                <body>
                    <h1> Add Post </h1>
                    <form action="/add" method="POST">
                        Title : <input type="text" name="title"> <br>
                        Content :
                        <textarea name="content"></textarea> <br>
                        <input type="submit" value="Add"> <br>
                    </form>
                    <br> <a href="/">Back to List</a>
                </body>
            </html>
        """

        self.wfile.write(html.encode('utf-8')) # body에 html 태그 내용을 태워서 보냄
    def list_page(self):
        self.send_response(200) # 상태코드 : 200 - Success
        self.send_header('Content-type', 'text/html') # body의 문서 종류
        self.end_headers()

        html = f"""
            <html>
                <body>
                    <h1> Simple Board</h1>
                    <table border="1">
                        <tr>
                            <th> ID </th>
                            <th> Title </th>
                            <th> Content </th>
                            <th> Delete </th>
                        </tr>
                        {board.list_posts()}
                    </table>
                    <br> <a href="/add">Add Post</a>
                </body>
            </html>
        """

        self.wfile.write(html.encode('utf-8')) # body에 html 태그 내용을 태워서 보냄

if __name__ == '__main__':
    server = http.server.HTTPServer(('localhost', 8000), RequestHandler)
    print('Starting server at http://localhost:8000')
    server.serve_forever()
